# 🔑 SSH Key-Based Authentication — Passwordless Login in Linux

## 📌 Purpose
Access a remote Linux server **without entering a password** by using SSH keys.  
Useful for:
1. **Repetitive logins** — Avoid typing credentials multiple times a day.
2. **Automation/scripts** — Allow scripts to run commands on remote servers without manual password input.

---

## 🖥️ Client & Server Setup
- **Client (source machine)** → The machine initiating the SSH connection.
- **Server (target machine)** → The machine being accessed.
- Example:
  - Client: `MyFirstLinuxVM` → IP: `192.168.1.95`
  - Server: `LinuxCentOS7` → IP: `192.168.1.58`
- SSH by default requires username & password; SSH keys remove that requirement.

---

## 🔍 How It Works
1. **Generate SSH key pair** on the client machine.
2. **Copy the public key** to the server’s `~/.ssh/authorized_keys`.
3. When connecting, the server checks the stored public key against the private key on the client:
   - If they match → login allowed without a password.
   - If not → password is still required.

💡 Analogy: Like giving the building's security team your ID once, so later you just scan your badge instead of re-verifying each time.

---

## 🛠 Steps to Configure

### 1️⃣ Generate SSH Key on Client
```bash
ssh-keygen
    Default save location:

        Root user: /root/.ssh/id_rsa (private key) & /root/.ssh/id_rsa.pub (public key).

    Passphrase:

        Recommended in production (extra security).

        For lab/demo: leave empty (just press Enter twice).

2️⃣ Copy Public Key to Server

ssh-copy-id root@192.168.1.58

    Replace root with the desired user if not using root.

    First-time connection will ask for the server account’s password.

    Key will be appended to:

/root/.ssh/authorized_keys

Verify:

    ls -l /root/.ssh
    cat /root/.ssh/authorized_keys

3️⃣ Test Passwordless Login

ssh root@192.168.1.58

or

ssh -l root 192.168.1.58

    Should log in without prompting for a password.

    Confirm with:

    hostname

📂 Key File Summary
File	Location (root user)	Purpose
id_rsa	/root/.ssh/	Private key (keep secret)
id_rsa.pub	/root/.ssh/	Public key (share with server)
authorized_keys	/root/.ssh/	Server's list of allowed public keys
⚠️ Security Tips

    Never share your private key (id_rsa).

    Restrict file permissions:

chmod 700 ~/.ssh
chmod 600 ~/.ssh/id_rsa
chmod 644 ~/.ssh/id_rsa.pub
chmod 600 ~/.ssh/authorized_keys

In production, use:

PermitRootLogin prohibit-password

in /etc/ssh/sshd_config for root key-only login.

Disable password authentication entirely once keys are in place:

    PasswordAuthentication no

🧪 Practice Ideas

    Try setting up key-based auth for a non-root user.

    Use ssh-agent to manage keys with passphrases.

    Test automation by creating a simple script that runs commands on the server without interaction.

    Set up key-based login between two different Linux distros.

✅ Summary:
Generate SSH keys on the client → Copy public key to server → Login without password → Secure permissions & SSH config.