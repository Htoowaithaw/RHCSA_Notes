# 🛠️ **`sed` Command Lecture Notes**

## 📌 **What is `sed`?**
- **`sed`** (Stream Editor) is used to **substitute, replace, or manipulate text** within files or input streams.
- It can:
  - Replace strings in a file.
  - Find and delete lines containing a specific pattern.
  - Remove empty lines.
  - Replace tabs with spaces (and vice versa).
  - Print specific lines or ranges of lines.
  - Insert extra blank lines between lines.
  - Perform these operations **without opening the file in an editor like `vi`**.

---

## 🔄 **Basic Syntax**
sed 's/old_text/new_text/' filename

- `s` → substitute.
- `old_text` → the text to find.
- `new_text` → the text to replace with.
- By default, changes **only appear on screen (stdout)**, not in the original file.

---

## 🌍 **Global Replacement**
sed 's/Kenny/Lenny/g' filename

- `g` → global replacement (replaces all occurrences in the line).

---

## 💾 **Editing the File Directly**
sed -i 's/Kenny/Lenny/g' filename
- `-i` → edits the file **in-place**.

---

## ❌ **Deleting Lines Containing a Pattern**
sed '/Seinfeld/d' filename
- Deletes all lines containing the word **Seinfeld**.
- Use `-i` to modify the file.

---

## 🧹 **Removing Empty Lines**
sed '/^$/d' filename
- `^` → start of line.
- `$` → end of line.
- Deletes lines that have **no content**.

---

## 🏷 **Deleting Specific Lines by Number**
sed '1d' filename # Deletes line 1
sed '1,2d' filename # Deletes lines 1 to 2
sed '5,10d' filename # Deletes lines 5 to 10

---

## ↔ **Replace Tabs with Spaces**
sed 's/\t/ /g' filename
- `\t` → tab character.
- Replace with a single space (or multiple spaces if required).

### **Replace Spaces with Tabs**
sed 's/ */\t/g' filename

yaml
Copy
Edit
- Replace multiple spaces with a single tab.

---

## 📜 **View Specific Line Ranges**
sed -n '12,18p' filename

markdown
Copy
Edit
- `-n` → suppress normal output.
- `p` → print lines between 12 and 18.

### **View All Except a Range**
sed '12,18d' filename

yaml
Copy
Edit

---

## ➕ **Insert Blank Lines Between Lines**
sed 'G' filename

yaml
Copy
Edit
- `G` → inserts an extra newline after every line.

---

## 🎯 **Replace Except a Specific Line**
To replace **all instances except line 8**:
sed '8!s/Seinfeld/S/g' filename

yaml
Copy
Edit
- `8!` → apply substitution on all lines **except line 8**.

---

## ✏️ **Using `vi` for Substitution**
- Inside `vi`, use:
:%s/old_text/new_text/g

yaml
Copy
Edit
- `:%s` → apply to the entire file.
- `g` → replace globally in each line.

---

## 💡 **Tips**
- Always test commands **without `-i`** first to avoid accidental changes.
- Use `-i.bak` to create a backup before making changes:
sed -i.bak 's/Kenny/Lenny/g' filename

csharp
Copy
Edit
- `sed` is extremely powerful — explore with:
man sed

yaml
Copy
Edit

---

## 🎯 **Key Takeaways**
- `sed` saves time by editing files **non-interactively**.
- Perfect for large files or batch replacements.
- Supports pattern-based operations (regex).

---