# 🔐 Linux Password Aging and Security Policies (`chage`, `/etc/login.defs`)

This note explains **how to control user password aging and account security** in Linux using the `chage` command and `/etc/login.defs` configuration file. It includes the **reason behind each setting**, real-world usage, and best practices for corporate environments.

---

## 📌 Why Password Aging Matters

In secure environments (e.g., corporate servers), you must enforce:
- **How often users must change passwords**
- **How long passwords are valid**
- **How early to warn users**
- **When to disable accounts after expiry**

This prevents:
- Users keeping the same password for years
- Dormant accounts being abused
- Poor security hygiene

---

## 🧩 Two Ways to Apply Password Policies

### ✅ **1. System-Wide Defaults**
Set defaults for all new users in:

/etc/login.defs


### ✅ **2. Per-User Customization**
Use the `chage` command to set policies for individual users.

---

## 📁 `/etc/login.defs` – System-Wide Settings

Set default password policies and user management behavior.

View the file:
```bash
cat /etc/login.defs

🔧 Key Parameters:
Parameter	Description
PASS_MAX_DAYS	Max days password is valid (e.g., 90)
PASS_MIN_DAYS	Min days before password can be changed again
PASS_WARN_AGE	Days before expiry to warn the user
UID_MIN / UID_MAX	Range of UIDs for normal users
GID_MIN / GID_MAX	Range of GIDs for normal groups
CREATE_HOME	Whether to create home directory (yes/no)
ENCRYPT_METHOD	Password encryption method (e.g., SHA512)
UMASK	Default permission mask for new files

These apply automatically when new users are created with useradd.
🔒 chage – Per-User Password Policy

Set/change password aging rules for specific users.
🔨 Command Format:

sudo chage [options] <username>

🛠 Options:
Option	Meaning
-m	Minimum days before password can be changed
-M	Maximum days password is valid
-W	Days before expiry to show a warning
-I	Inactive period (days after expiry before disabling account)
-E	Expiry date (absolute date or days since 1970-01-01)
-l	Show current aging settings for a user
-d	Set last password change date (use with care)
📦 Real Example: Securing babubutt Account

sudo chage -m 5 -M 90 -W 10 -I 3 babubutt

What This Means:
Setting	Value	Meaning
-m 5	5	User can't change password again for 5 days
-M 90	90	Password expires after 90 days
-W 10	10	User gets warning 10 days before expiry
-I 3	3	Account is disabled 3 days after password expiry
🔎 View User Aging Info

sudo chage -l babubutt

Sample Output:

Last password change					: Jul 25, 2025
Password expires						: Oct 23, 2025
Password inactive						: Oct 26, 2025
Account expires							: never
Minimum number of days between password change		: 5
Maximum number of days between password change		: 90
Number of days of warning before password expires	: 10

🔐 /etc/shadow – Where Aging Info is Stored

This file stores encrypted passwords and aging metadata.

sudo grep babubutt /etc/shadow

Sample line:

babubutt:$6$...$...:19854:5:90:10:3::

Field	Meaning
1	Username
2	Encrypted password
3	Last password change (days since 1970-01-01)
4	Min days before change
5	Max days before expiry
6	Warning period
7	Inactive period
8	Expiry date (absolute days since epoch)
🧠 Best Practices

    Set default policies in /etc/login.defs to enforce organization-wide standards.

    Use chage for per-user exceptions or tighter security.

    Always test policies before rolling out to production systems.

    Combine chage and /etc/login.defs with pam_pwquality for password strength.

📝 Summary
Task	Tool
Set global default aging rules	/etc/login.defs
Apply per-user aging rules	chage
View aging settings	chage -l <user>
View raw info	/etc/shadow
✅ Example: Full Security Hardening for a New User

sudo useradd -m -s /bin/bash -G devteam -c "Backend Dev" ironman
sudo passwd ironman
sudo chage -m 5 -M 90 -W 7 -I 3 ironman
