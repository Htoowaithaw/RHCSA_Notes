# 🔁 Linux Shell Scripting – For Loop Scripts (Full Lecture Note)

## 📌 Objective

Learn how to:
- Use `for` loops to automate repetitive tasks
- Loop through numbers or text values
- Echo messages dynamically
- Apply loops to real-world admin tasks

---

## 🧱 Basic For Loop with Numbers

A simple loop that prints a message multiple times.

```
for i in 1 2 3 4 5
do
  echo "Welcome $i times"
done
```

📝 Explanation:
- `i` is a loop variable (container)
- The loop runs once for each value: 1 → 5
- `echo` prints a message using `$i`
- `done` ends the loop block

---

## 🧪 Output of the Script

```
Welcome 1 times
Welcome 2 times
Welcome 3 times
Welcome 4 times
Welcome 5 times
```

✅ Great for automating batch jobs or repeated commands.

---

## 🧱 For Loop with Actions (Words)

A loop that combines a name with multiple actions.

```
# This script will output Imran with different actions
# Created by Imran Afzal

for i in eat jump run play
do
  echo "See Imran $i"
done
```

📝 Explanation:
- The loop variable `i` holds words: eat, jump, run, play
- It prints a sentence for each action
- Great for dynamic text output

---

## 🧪 Output of the Script

```
See Imran eat
See Imran jump
See Imran run
See Imran play
```

✅ Efficient for log messages, status reports, or bulk file ops.

---

## 📂 Real-World Use Case

System admins and DevOps engineers use for loops to:
- Create/delete multiple files
- Restart or stop a group of services
- Batch process logs
- Run a command against many servers or inputs

Example:

```
for server in server1 server2 server3
do
  ssh $server "uptime"
done
```

---

## 🧪 Common Mistakes

- ❌ Missing `do` or `done`
- ❌ Not making the script executable (`chmod +x script.sh`)
- ❌ Typing filename wrong when executing (e.g., `bash abc` vs `bash ./abc`)

---

## ✅ Key Takeaways

- Use `for` loops to simplify repetitive work
- Loop variables can hold numbers or text values
- Always end the loop with `done`
- Use `chmod +x` to run scripts directly
- For loops are powerful for scripting automation

---

## 📬 Final Words from Instructor

- Practice writing loops with your own values
- Try looping over users, services, or files
- Check your course handouts for more examples
- Keep experimenting — scripting skills improve with hands-on use

---