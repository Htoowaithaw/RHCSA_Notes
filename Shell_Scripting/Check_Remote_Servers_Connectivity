# 📡 Check Other Server Connectivity — Single Continuous Lecture Notes (Imran Afzal)

🎯 **Objective:** Create simple Bash scripts to ping remote hosts (one or many) and print a clean status using if/else, variables, loops, and output redirection — all summarized in one continuous Markdown note.

## 🧠 Big Picture
- Use `ping` to test reachability.
- Check command success via exit codes (`$?` or by putting the command directly in `if`).
- Keep output tidy by redirecting to `/dev/null`.
- Scale from a single IP to many using a list file and a loop.
- (Later) Automate with cron.

## 🗂 Quick Setup
- Shorten your working directory for convenience:
  - `mv professional-scripts ps`
  - `cd ps`
- Optional manual check: `ping 192.168.1.1` (reply like `64 bytes from …` means reachable; `Ctrl+C` to stop).

## ✍️ Script 1 — Single Host, Basic if/else
- Purpose: Ping once and report “OK” or “NOT OK”.
- File: `ping-script`

    #!/bin/bash
    # Date: YYYY-MM-DD
    # Description: Ping a remote host once and report status.
    ping -c1 192.168.1.1
    if [ $? -eq 0 ]; then
      echo "OK"
    else
      echo "NOT OK"
    fi

- Notes:
  - `-c1` sends one ICMP echo.
  - `$?` returns `0` on success, non-zero on failure.
  - `if … else … fi` branches on that result.

## 🔇 Cleaner Output — Suppress Ping Noise
- Show only the verdict by silencing ping’s normal output:

    if ping -c1 192.168.1.1 &> /dev/null; then
      echo "OK"
    else
      echo "NOT OK"
    fi

- `&>` redirects both stdout and stderr to `/dev/null`.

## 🧰 Script 2 — Use a Variable for the Host
- Benefit: Change the IP in one place; reuse it in messages and commands.
- File: `ping-script` (variant)

    #!/bin/bash
    # Date: YYYY-MM-DD
    # Description: Ping a host (from variable) and report status.
    hosts="192.168.1.1"
    if ping -c1 "$hosts" &> /dev/null; then
      echo "$hosts is OK"
    else
      echo "$hosts is NOT OK"
    fi

- Try an unreachable demo IP by setting `hosts="192.168.1.235"` to see the “NOT OK” path.

## 📑 Prepare a Host List for Bulk Checks
- Create a flat file with one target per line.
- File: `myhosts`

    192.168.1.1
    192.168.1.235

## 🔁 Script 3 — Ping Many Hosts with a Loop
- Purpose: Iterate over all entries in `myhosts` and print per-host status.
- File: `ping-script-all`

    #!/bin/bash
    # Date: YYYY-MM-DD
    # Description: Ping multiple remote hosts and report their status.
    hosts="/home/iafzal/ps/myhosts"   # update path to your own
    for IP in $(cat "$hosts"); do
      if ping -c1 "$IP" &> /dev/null; then
        echo "$IP is OK"
      else
        echo "$IP is NOT OK"
      fi
    done

- Example output:
  - `192.168.1.1 is OK`
  - `192.168.1.235 is NOT OK`

- Robust alternative (handles spaces/blank lines safely):

    #!/bin/bash
    hosts="/home/iafzal/ps/myhosts"
    while IFS= read -r IP; do
      [ -z "$IP" ] && continue
      if ping -c1 "$IP" &> /dev/null; then
        echo "$IP is OK"
      else
        echo "$IP is NOT OK"
      fi
    done < "$hosts"

## 🧪 How to Run
- Make scripts executable: `chmod +x ping-script ping-script-all`
- Execute: `./ping-script` and `./ping-script-all`

## 🧯 Troubleshooting
- **Permissions:** Ensure `chmod +x` was applied.
- **Paths:** Verify the full path to `myhosts` in the script (`hosts="…/myhosts"`).
- **Network/ICMP:** Some hosts drop ping; “NOT OK” can mean filtered, not strictly down.
- **Latency/Timeouts:** `ping` may wait briefly for a reply; increase tries with `-c3` if needed.

## ⏰ (Optional) Automate with Cron
- Idea: Append results to a log every 5 minutes:

    */5 * * * * /home/you/ps/ping-script-all >> /home/you/ps/ping.log 2>&1

## ✅ Key Takeaways
- Check success with exit codes (`$?`) or by placing the command inside `if`.
- Redirect to `/dev/null` to keep output clean.
- Use variables to avoid repetition.
- Loop through a host list file for scale.
- Remember to close blocks correctly: `if … fi`, `for/while … done`.

## 🧪 Practice Ideas
- Add more hosts/hostnames to `myhosts` and rerun.
- Log results with timestamps:

    if ping -c1 "$IP" &> /dev/null; then
      echo "$(date +'%F %T') $IP is OK" >> ping.log
    else
      echo "$(date +'%F %T') $IP is NOT OK" >> ping.log
    fi

- Vary count: compare `-c1` vs `-c3` for reliability.

## 🏁 TL;DR
You built a minimal single-host checker, a clean status-only variant, and a multi-host checker reading from a file — ready for cron automation.
![alt text](<Screenshot from 2025-08-09 14-40-39.png>) ![alt text](<Screenshot from 2025-08-09 14-43-40.png>)